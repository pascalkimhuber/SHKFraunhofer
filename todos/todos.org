#+STARTUP: logdone

* Organization

** Commit conventions
1. Name branch I am working in.
2. Be explicit about what has been done.
3. Mark if a "project" is finished.


* Configurations

** TODO Change passwords
Wait for Mail from IT. Change password if smartcard is there!


* Emacs

** Language evaluation in org mode (see http://zeekat.nl/articles/making-emacs-work-for-me.html#sec-10)
** DONE Qt Auto complete
   CLOSED: [2014-04-16 Wed 15:04]

** TODO Syntax highlighting for doxygen comments in c++ mode. 

** TODO Setter and getter methods. 


* Arbeitszeiten
- [2013-12-16 Sat 16:30]--[2013-12-16 Mon 18:00]

- [2013-12-18 Wed 17:30]--[2013-12-18 Wed 19:56]
- [2013-12-19 Thu 14:00]--[2013-12-19 Thu 17:02]
- [2014-01-05 Sun 14:30]--[2014-01-05 Sun 19:30]

- [2014-01-07 Tue 12:17]--[2014-01-07 Tue 14:00]
- [2014-01-09 Thu 12:15]--[2014-01-09 Thu 14:00]
- [2014-01-11 Sat 09:17]--[2014-02-11 Tue 13:15]
- [2014-01-12 Sun 13:25]--[2014-02-12 Wed 17:00]

- [2014-01-13 Mon 13:30]--[2014-01-13 Mon 15:15]
- [2014-01-16 Thu 14:15]--[2014-01-16 Thu 16:32]
- [2014-01-19 Sun 09:06]--[2014-01-19 Sun 13:00]

- [2014-01-20 Mon 16:58]--[2014-01-20 Mon 18:30]
- [2014-01-21 Tue 12:00]--[2014-01-21 Tue 13:55]
- [2014-01-23 Thu 12:15]--[2014-01-23 Thu 13:55]
- [2014-01-25 Sat 09:00]--[2014-01-25 Sat 14:00]

- [2014-01-27 Mon 10:21]--[2014-01-27 Mon 11:30]
- [2014-01-27 Mon 13:35]--[2014-01-27 Mon 15:40]
- [2014-01-28 Tue 14:44]--[2014-01-28 Tue 17:30]
- [2014-01-29 Wed 09:19]--[2014-01-29 Wed 12:25]
- [2014-01-30 Thu 10:30]--[2014-01-30 Thu 11:25]
- [2014-01-30 Thu 12:20]--[2014-01-30 Thu 15:35]

- [2014-02-03 Mon 13:58]--[2014-02-03 Mon 15:45]
- [2014-02-05 Wed 09:47]--[2014-02-05 Wed 13:45]
- [2014-02-06 Thu 10:00]--[2014-02-06 Thu 12:00]
- [2014-02-06 Thu 13:00]--[2014-02-06 Thu 14:41]
- [2014-02-07 Fri 10:15]--[2014-02-07 Fri 12:00]
- [2014-02-07 Fri 17:00]--[2014-02-07 Fri 18:28]
- [2014-02-08 Sat 11:20]--[2014-02-08 Sat 13:00]

- [2014-02-10 Mon 12:54]--[2014-02-10 Mon 14:54]
- [2014-02-11 Tue 10:13]--[2014-02-11 Tue 11:40]
- [2014-02-12 Wed 12:46]--[2014-02-12 Wed 15:00]
- [2014-02-13 Thu 12:57]--[2014-02-13 Thu 14:00]
- [2014-02-13 Thu 16:12]--[2014-02-13 Thu 18:40]
- [2014-02-14 Fri 10:53]--[2014-02-14 Fri 11:55]
  
- [2014-02-18 Tue 12:54]--[2014-02-18 Tue 16:30]
- [2014-02-19 Wed 09:28]--[2014-02-19 Wed 12:15]
- [2014-02-19 Wed 13:30]--[2014-02-19 Wed 16:06]
- [2014-02-20 Thu 09:28]--[2014-02-20 Thu 11:55]

- [2014-03-06 Thu 08:35]--[2014-03-06 Thu 12:19]

- [2014-03-10 Mon 13:15]--[2014-03-10 Mon 14:15]

- [2014-03-28 Fri 16:00]--[2014-03-28 Fri 17:30]

- [2014-04-01 Tue 13:38]--[2014-04-01 Tue 17:40]

- [2014-04-03 Thu 08:45]--[2014-04-03 Thu 09:45]

- [2014-04-03 Thu 13:30]--[2014-04-03 Thu 17:36]
- [2014-04-06 Sun 16:30]--[2014-04-06 Sun 19:38]

- [2014-04-07 Mon 13:57]--[2014-04-07 Mon 18:00]
- [2014-04-08 Tue 12:59]--[2014-04-08 Tue 15:00]
- [2014-04-09 Wed 13:00]--[2014-04-09 Wed 14:54]

- [2014-04-21 Mon 14:00]--[2014-04-21 Mon 18:00]
- [2014-04-15 Tue 14:44]--[2014-04-15 Tue 15:44]
- [2014-04-16 Wed 14:00]--[2014-04-16 Wed 15:30]

- [2014-04-23 Wed 13:28]--[2014-04-23 Wed 16:00]
  

* Nuetzliches

** Tremolo aktualisieren

Nachdem eine neue Version des Tremolo-Ordners gepullt wurde, kann Tremolo wie folgt aktualisiert werden: 
: cd ~/tremolo/build
: make && make install

Das selbe gilt für Tremologui. 
: cd ~/tremologui/build
: make && make install


** Gnuplot Befehle

Einen Ueberblick zu nuetzlichen Gnuplot Befehlen kann auf der folgenden Seite gefunden werden: http://people.duke.edu/~hpgavin/gnuplot.html

1. Um ein Data-file (zum Beispiel =*.epot*=) mit Gnuplot zu plotten, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2
   Hierbei wird die zweite Spalte gegen die erste Spalte aufgetragen. 
2. Dies kann auch mit mehreren Files gleichzeitig getan werden: \\
   : gnuplot> plot "./argon.etot" using 1:2, "./argon.ekin" using 1:2, "./argon.epot" using 1:2
3. Um den Achsenabschnitt zu veraendern, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2; set yrange [-0.1: 2]
4. Den urspruenglichen Achsenabschnitt kann man wie folgt wieder herstellen: \\
   : gnuplot> plot "./argon.epot" using 1:2; set autoscale
5. Mit \\
   : gnuplot> replot 
   kann der Plot aktualisiert werden. 
6. Eine Uebersicht von =set= Befehlen: 
   Create a title:                  
   : set title "Force-Deflection Data" 
   Put a label on the x-axis:       
   : set xlabel "Deflection (meters)" 
   Put a label on the y-axis:       
   : set ylabel "Force (kN)"
   Change the x-axis range:         
   : set xrange [0.001:0.005]
   Change the y-axis range:         
   : set yrange [20:500] 
   Have Gnuplot determine ranges:   
   : set autoscale
   Move the key:                    
   : set key 0.01,100
   Delete the key:                  
   : unset key
   Put a label on the plot:         
   : set label "yield point" at 0.003, 260
   Remove all labels:               
   : unset label
   Plot using log-axes:             
   : set logscale
   Plot using log-axes on y-axis:   
   : unset logscale; set logscale y
   Change the tic-marks:            
   : set xtics (0.002,0.004,0.006,0.008)
   Return to the default tics:      
   : unset xtics; set xtics auto
   Set output:                      
   : set output 'introduction.png'

   
** Grep Befehle

http://www.panix.com/~elflord/unix/grep.html


** Git Befehle

*** Branches
- Create a new branch:
  : git branch <name_of_new_branch>
- Create a new branch by pulling from a remote branch:
  : git checkout -b <name_of_new_branch> origin/<name_of_branch>
- Delete a local branch:
  : git branch -d <name_of_branch>

*** Diff
- Show differences between <branch1> and <branch2>
  : git diff <branch1>..<branch2>

*** Manipulate changes. 
- Remove untracked files:
  : git clean -f -d

*** Add and remove changes. 
- Remove deleted files from stack:
  : git add -u .

*** Remote repositories
- Add remote repository with name /origin/ (e.g. https://pascalkimhuber@bitbucket.org/pascalkimhuber/stacked.git)
  : git remote add origin <address of remote> 
- Push a local repository to a remote repository with name /origin/ for the first time
  : git push -u origin --all

*** Merging branches
- Merge <branch1> into <branch2>
  : git checkout <branch2>
  : git merge <branch1>
  

** Find Befehle

- Find all files with names containing =<pattern>= (wildcards have to be used with a preceeding backslash!):
  : find -name <pattern> 
  or e.g. 
  : find -name <pattern>\*


** Doxygen Befehle

- [[http://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdc][List of special commands]]
  

* Aufgaben
  - Note taken on [2014-04-16 Wed 15:57] \\
	Besprechung mit Christian um [2014-04-16 Wed 15:57]
	
	Zwei Aufgabenziele: 
	1. Kurzfristiges Ziel:
	   Überarbeitung des "potentials" tabs
	   - Übernehme Elemente von "Datafile" tab
	   - Obere 2/3 des Tabs: Editor-Fenster in das ein Potentials-file geladen werden soll
		 - der Editor soll die Funktionen "open" and "save" bereitstellen
		 - open-button:
		   + soll erweiterbar sein (d.h. es sollen noch mögliche "Suchfunktionen" eingebunden werden können -> handler)
		   + vorerst: einen beliebigen Ordner öffnen
		   + nach .potential files filtern
		   + nachdem der Nutzer ein file ausgewählt hat, soll eine Kopie des files in den Projekt-Ordner gelegt werden mit dem Namen "PROJECTNAME.potentials"
		   + falls nach Sicherung eines .potential-files ein weiteres file geöffnet wird, soll eine Warnung zum "Datenverlust" abgegeben werden.
		 - save-button: 
		   + speichert die Änderungen im .potentials file.
	   - Stelle sicher, dass immer ein .validates-file erzeugt wird (notfalls auch leer (default)). 
	2. Langfristiges Ziel: 
	   - Verifizieren von Ensembles 
	   - etwas mit Monte-Carlo Methoden (siehe folgende Links)
		 - [[file:~/Work/literature/Possible%20Master%20topics/Combining%20molecular%20dynamics%20with%20Monte%20Carlo%20simulations.pdf][Combining molecular dynamics and Monte Carlo methods]]
		 - [[file:~/Work/literature/Possible%20Master%20topics/Uniform-acceptance%20force-bias%20Monte%20Carlo%20method%20with%20time%20scale%20to%20study%20solid-state%20diffusion.pdf][Uniform-acceptance force-bias Monte Carlo method]]

** TODO Create new branch
  

** TODO Determine which files have to be modified

*** Files for Potential-tab
potential.cpp                
potential.h                  
potentialparameter_data.cpp  
potentialparameter_data.h    
potentialparametertable.cpp  
potentialparametertable.h
potentialparameterui.cpp
potentialparameterui.h
potentialparameteruisuper.cpp
potentialparameteruisuper.h
potentialparameterwidget.cpp
potentialparameterwidget.h

*** Files for Datafile-tab
parametertextedit.h
parametertextedit.cpp

*** Description of parametertextedit.h and parametertextedit.cpp
- Two classes
  1. class textEditStatusBar : public QWidget
  2. class parameterTextEdit : public QMainWindow

**** Description of textEditStatusBar class

Implements the status bar in the "Datafile"-tab (just at the lower end of the window). 

The status bar consists of 4 different frames (QFrame) containing each a QLabel with
+ the current position of the cursor
+ a indicator that shows if the file has been changed
+ the type of the file
+ the name of the file

The layout is managed by a QHBoxLayout for the statusbar itself and for different GridLayouts for each of the frames. 

The following slots are implemented:
+ changeCurrentPos
+ setFilename
+ setEditMode
+ languageChange

**** Description of parameterTextEdit class

Implements a texteditor for datafiles in the "Datafile"-tab. It is essentially a QMainWindow with a QTextEdit. Moreover the class has a textEditStatusBar as child object.

The class contains the following children:
+ QTextEdit for the texteditor window
+ QToolBar a toolbar for the texteditor
+ QActions for all buttons on the toolbar
+ QStrings to save the parameter file and a suffix
+ textEditStatusBar 
+ bools for different indications

The layout is managed by only one QVBoxLayout. 

There are only a few method implemented in the class: 
+ bool isSaved() const // returns true if the file is saved
+ void setSavedStatus(bool status) // sets the status of the file
+ void fileLoad(QString File) // loads the file that is supposed to be edited
+ void renewTextEdit2() // ?

Slots:
+ void fileSave() // saves the file
+ void reloadfile(QString parameterFileIn) // reload the file
+ void clearBuffer(bool ask=true) // ?
+ void setLoadingfileStatus(bool status) // ?
+ void enableFileSaveAction(void) // ?
+ void changeCurrentPos (void) // ?
+ void fileOpen() // open new file
+ fileSaveAs() // save file as
+ textEditChanged // action if textEdit has been changed
+ virtual void languageChange() // set language

Signals:
+ void newSaveState() // is send if the save-state of the file changes


** TODO Draft for new "Potentials" tab

*** Class potentialEditStatusBar : public QWidget

Analogously to the textEditStatusBar in the parameterTextEdit class. 

*** Class potentialTextEdit : public QMainWindow

Child objects:
+ QTextEdit for the texteditor window
+ QToolBar for a toolbar
+ QActions for the buttons of the toolbar
+ potentialEditStatusBar for the statusbar
+ QString to save the path of the current file
+ QString to save the suffix of the file (not necessary?)
+ bool to keep track of the enabled status
+ bool to keep track of the loadingfile status
+ bool to keep track of the saved status
+ QVBoxLayout for the overall layout

Methods: 
+ bool isSaved() const // returns true if the file is saved
+ void setSavedStatus(bool status) // sets the saved status
+ void fileLoad(QString file) // load specified file into the texteditor
+ ???? void renewTextEdit2() // renew the whole text editor (never used?) 

Slots:
+ void fileOpen() // open new file - should be extendible for more functionality
+ void fileSave() // save file
+ void reloadfile(QString parameterFileIn) // reload the file
+ void clearBuffer(bool ask=true) // clears the buffer (used in fileOpen())
+ void setLoadingfileStatus(bool status) // sets loadingfile to the specified status
+ void enableFileSaveAction(void) // enables save button
+ void changeCurrentPos(void) // sync statusbar with textcursor position
+ void textEditChanged() // sync everything after changing
+ virtual void languageChange() // set language

Signals: 
+ void newSaveState() 


* Fragen

1. [ ] Wann können branches aus dem Repository gelöscht werden?
2. [ ] Die Methode void parameterTextEdit::renewTextEdit2() wird nie verwendet!?
3. [ ] Option "Save as" in potentials tab? Evtl. Speichere schon verwendete Potentiale in extra Struktur? 


 
