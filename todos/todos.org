#+STARTUP: logdone

* Organization

** Commit conventions
1. Name branch I am working in.
2. Be explicit about what has been done.
3. Mark if a "project" is finished.


* Configurations

** TODO Change passwords
Wait for Mail from IT. Change password if smartcard is there!


* Emacs

** Language evaluation in org mode (see http://zeekat.nl/articles/making-emacs-work-for-me.html#sec-10)
** DONE Qt Auto complete
   CLOSED: [2014-04-16 Wed 15:04]

** TODO Syntax highlighting for doxygen comments in c++ mode. 

** TODO Setter and getter methods. 

** TODO Rewrite Arbeitszeiten section


* Arbeitszeiten
- [2013-12-16 Sat 16:30]--[2013-12-16 Mon 18:00]

- [2013-12-18 Wed 17:30]--[2013-12-18 Wed 19:56]
- [2013-12-19 Thu 14:00]--[2013-12-19 Thu 17:02]
- [2014-01-05 Sun 14:30]--[2014-01-05 Sun 19:30]

- [2014-01-07 Tue 12:17]--[2014-01-07 Tue 14:00]
- [2014-01-09 Thu 12:15]--[2014-01-09 Thu 14:00]
- [2014-01-11 Sat 09:17]--[2014-02-11 Tue 13:15]
- [2014-01-12 Sun 13:25]--[2014-02-12 Wed 17:00]

- [2014-01-13 Mon 13:30]--[2014-01-13 Mon 15:15]
- [2014-01-16 Thu 14:15]--[2014-01-16 Thu 16:32]
- [2014-01-19 Sun 09:06]--[2014-01-19 Sun 13:00]

- [2014-01-20 Mon 16:58]--[2014-01-20 Mon 18:30]
- [2014-01-21 Tue 12:00]--[2014-01-21 Tue 13:55]
- [2014-01-23 Thu 12:15]--[2014-01-23 Thu 13:55]
- [2014-01-25 Sat 09:00]--[2014-01-25 Sat 14:00]

- [2014-01-27 Mon 10:21]--[2014-01-27 Mon 11:30]
- [2014-01-27 Mon 13:35]--[2014-01-27 Mon 15:40]
- [2014-01-28 Tue 14:44]--[2014-01-28 Tue 17:30]
- [2014-01-29 Wed 09:19]--[2014-01-29 Wed 12:25]
- [2014-01-30 Thu 10:30]--[2014-01-30 Thu 11:25]
- [2014-01-30 Thu 12:20]--[2014-01-30 Thu 15:35]

- [2014-02-03 Mon 13:58]--[2014-02-03 Mon 15:45]
- [2014-02-05 Wed 09:47]--[2014-02-05 Wed 13:45]
- [2014-02-06 Thu 10:00]--[2014-02-06 Thu 12:00]
- [2014-02-06 Thu 13:00]--[2014-02-06 Thu 14:41]
- [2014-02-07 Fri 10:15]--[2014-02-07 Fri 12:00]
- [2014-02-07 Fri 17:00]--[2014-02-07 Fri 18:28]
- [2014-02-08 Sat 11:20]--[2014-02-08 Sat 13:00]

- [2014-02-10 Mon 12:54]--[2014-02-10 Mon 14:54]
- [2014-02-11 Tue 10:13]--[2014-02-11 Tue 11:40]
- [2014-02-12 Wed 12:46]--[2014-02-12 Wed 15:00]
- [2014-02-13 Thu 12:57]--[2014-02-13 Thu 14:00]
- [2014-02-13 Thu 16:12]--[2014-02-13 Thu 18:40]
- [2014-02-14 Fri 10:53]--[2014-02-14 Fri 11:55]
  
- [2014-02-18 Tue 12:54]--[2014-02-18 Tue 16:30]
- [2014-02-19 Wed 09:28]--[2014-02-19 Wed 12:15]
- [2014-02-19 Wed 13:30]--[2014-02-19 Wed 16:06]
- [2014-02-20 Thu 09:28]--[2014-02-20 Thu 11:55]

- [2014-03-06 Thu 08:35]--[2014-03-06 Thu 12:19]

- [2014-03-10 Mon 13:15]--[2014-03-10 Mon 14:15]

- [2014-03-28 Fri 16:00]--[2014-03-28 Fri 17:30]

- [2014-04-01 Tue 13:38]--[2014-04-01 Tue 17:40]

- [2014-04-03 Thu 08:45]--[2014-04-03 Thu 09:45]

- [2014-04-03 Thu 13:30]--[2014-04-03 Thu 17:36]
- [2014-04-06 Sun 16:30]--[2014-04-06 Sun 19:38]

- [2014-04-07 Mon 13:57]--[2014-04-07 Mon 18:00]
- [2014-04-08 Tue 12:59]--[2014-04-08 Tue 15:00]
- [2014-04-09 Wed 13:00]--[2014-04-09 Wed 14:54]

- [2014-04-21 Mon 14:00]--[2014-04-21 Mon 18:00]
- [2014-04-15 Tue 14:44]--[2014-04-15 Tue 15:44]
- [2014-04-16 Wed 14:00]--[2014-04-16 Wed 15:30]

- [2014-04-23 Wed 13:28]--[2014-04-23 Wed 16:00]
- [2014-04-24 Thu 16:47]--[2014-04-24 Thu 18:30]
- [2014-04-27 Sun 11:21]--[2014-04-27 Sun 14:00]

- [2014-04-28 Mon]--[2014-05-04 Sun]
  - [2014-04-28 Mon 10:37]--[2014-04-28 Mon 11:40]
  - [2014-04-30 Wed 09:58]--[2014-04-30 Wed 11:58]
  - [2014-04-30 Wed 13:00]--[2014-04-30 Wed 15:30]
  - [2014-05-03 Sat 09:00]--[2014-05-03 Sat 11:00]

- [2014-05-05 Mon]--[2014-05-11 Sun]
  - [2014-05-05 Mon 10:07]--[2014-05-05 Mon 11:40]
  - [2014-05-05 Mon 15:02]--[2014-05-05 Mon 17:30]


* Nuetzliches

** Tremolo aktualisieren

Nachdem eine neue Version des Tremolo-Ordners gepullt wurde, kann Tremolo wie folgt aktualisiert werden: 
: cd ~/tremolo/build
: make && make install

Das selbe gilt für Tremologui. 
: cd ~/tremologui/build
: make && make install


** Gnuplot Befehle

Einen Ueberblick zu nuetzlichen Gnuplot Befehlen kann auf der folgenden Seite gefunden werden: http://people.duke.edu/~hpgavin/gnuplot.html

1. Um ein Data-file (zum Beispiel =*.epot*=) mit Gnuplot zu plotten, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2
   Hierbei wird die zweite Spalte gegen die erste Spalte aufgetragen. 
2. Dies kann auch mit mehreren Files gleichzeitig getan werden: \\
   : gnuplot> plot "./argon.etot" using 1:2, "./argon.ekin" using 1:2, "./argon.epot" using 1:2
3. Um den Achsenabschnitt zu veraendern, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2; set yrange [-0.1: 2]
4. Den urspruenglichen Achsenabschnitt kann man wie folgt wieder herstellen: \\
   : gnuplot> plot "./argon.epot" using 1:2; set autoscale
5. Mit \\
   : gnuplot> replot 
   kann der Plot aktualisiert werden. 
6. Eine Uebersicht von =set= Befehlen: 
   Create a title:                  
   : set title "Force-Deflection Data" 
   Put a label on the x-axis:       
   : set xlabel "Deflection (meters)" 
   Put a label on the y-axis:       
   : set ylabel "Force (kN)"
   Change the x-axis range:         
   : set xrange [0.001:0.005]
   Change the y-axis range:         
   : set yrange [20:500] 
   Have Gnuplot determine ranges:   
   : set autoscale
   Move the key:                    
   : set key 0.01,100
   Delete the key:                  
   : unset key
   Put a label on the plot:         
   : set label "yield point" at 0.003, 260
   Remove all labels:               
   : unset label
   Plot using log-axes:             
   : set logscale
   Plot using log-axes on y-axis:   
   : unset logscale; set logscale y
   Change the tic-marks:            
   : set xtics (0.002,0.004,0.006,0.008)
   Return to the default tics:      
   : unset xtics; set xtics auto
   Set output:                      
   : set output 'introduction.png'

   
** Grep Befehle

http://www.panix.com/~elflord/unix/grep.html


** Git Befehle

*** Branches
- Create a new branch:
  : git branch <name_of_new_branch>
- Create a new branch by pulling from a remote branch:
  : git checkout -b <name_of_new_branch> origin/<name_of_branch>
- Delete a local branch:
  : git branch -d <name_of_branch>
- Naming convention: use well defined tokes like 
  : feature
  : bugfix
  : test
  followed by a slash '/' and a describing name, e.g.:
  : feature/potentials

*** Diff
- Show differences between <branch1> and <branch2>
  : git diff <branch1>..<branch2>

*** Manipulate changes. 
- Remove untracked files:
  : git clean -f -d

*** Add and remove changes. 
- Remove deleted files from stack:
  : git add -u .

*** Remote repositories
- Add remote repository with name /origin/ (e.g. https://pascalkimhuber@bitbucket.org/pascalkimhuber/stacked.git)
  : git remote add origin <address of remote> 
- Push a local repository to a remote repository with name /origin/ for the first time
  : git push -u origin --all

*** Merging branches
- Merge <branch1> into <branch2>
  : git checkout <branch2>
  : git merge <branch1>
  

** Find Befehle

- Find all files with names containing =<pattern>= (wildcards have to be used with a preceeding backslash!):
  : find -name <pattern> 
  or e.g. 
  : find -name <pattern>\*


** Doxygen Befehle

- [[http://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdc][List of special commands]]
  

* Aufgaben
  - Note taken on [2014-04-16 Wed 15:57] \\
	Besprechung mit Christian um [2014-04-16 Wed 15:57]
	
	Zwei Aufgabenziele: 
	1. Kurzfristiges Ziel:
	   Überarbeitung des "potentials" tabs
	   - Übernehme Elemente von "Datafile" tab
	   - Obere 2/3 des Tabs: Editor-Fenster in das ein Potentials-file geladen werden soll
		 - der Editor soll die Funktionen "open" and "save" bereitstellen
		 - open-button:
		   + soll erweiterbar sein (d.h. es sollen noch mögliche "Suchfunktionen" eingebunden werden können -> handler)
		   + vorerst: einen beliebigen Ordner öffnen
		   + nach .potential files filtern
		   + nachdem der Nutzer ein file ausgewählt hat, soll eine Kopie des files in den Projekt-Ordner gelegt werden mit dem Namen "PROJECTNAME.potentials"
		   + falls nach Sicherung eines .potential-files ein weiteres file geöffnet wird, soll eine Warnung zum "Datenverlust" abgegeben werden.
		 - save-button: 
		   + speichert die Änderungen im .potentials file.
	   - Stelle sicher, dass immer ein .validates-file erzeugt wird (notfalls auch leer (default)). 
	2. Langfristiges Ziel: 
	   - Verifizieren von Ensembles 
	   - etwas mit Monte-Carlo Methoden (siehe folgende Links)
		 - [[file:~/Work/literature/Possible%20Master%20topics/Combining%20molecular%20dynamics%20with%20Monte%20Carlo%20simulations.pdf][Combining molecular dynamics and Monte Carlo methods]]
		 - [[file:~/Work/literature/Possible%20Master%20topics/Uniform-acceptance%20force-bias%20Monte%20Carlo%20method%20with%20time%20scale%20to%20study%20solid-state%20diffusion.pdf][Uniform-acceptance force-bias Monte Carlo method]]

** TODO Refactoring of "Potentials" page [1/8]

*** DONE Create new branch
	 CLOSED: [2014-04-27 Sun 11:53]
**** DONE First pull all changes from remote repository. 
	 CLOSED: [2014-04-27 Sun 11:49]
**** DONE Create new branch
	 CLOSED: [2014-04-27 Sun 11:53]
Created new branch with name
: feature/potentials	 


*** TODO Which source files have to be modified?
**** Overview of all files related to the "Potentials tab"
***** potential.h
****** Implements: 
class Potential
typedef Potentials
****** Description:	   
Base class for all potential types. 	  
****** Derived classes:
class Bond
****** Questions:
Is this really used nowhere else? 
****** Must be changed? 
No. 

***** potentialparameter_data.h 
****** Implements:
class PotentialParameter_Data	   
****** Description:
The class contains all data that is necessary to write the potentials and the validates file. 
******* Members (only important ones)
- instances of all potentials 
- pointer to the project (Project_Control* myProject)
- pointer to the configuration (TremoloGUIConfig* myConfig)
- a parser (ParameterParser* myParser)
- pointer to the PotentialParameterUI parent class (PotentialParameterUISuperClass* parentUI)
- booleans to indicate which potentials are going to be used
- boolean loadingFile (if true some tests are skipped -> faster loading)
******* Member functions (only important ones)
- getter and setter methods for all potentials
- saveValues(): uses the Output of the parser and saves all data from the file into the data structure - this method is called within ParameterParser::parseFile()
- writeToFile(): Opens a file for writing, calls toParameterFileString() and writes all data to the file
- writeToValidatesFile(): Analougously to writeToFile() but for the validates data.
- readFromFile(): starts the parser for the given file and then saves all data to the data structure
- projectHasChanged(): important SLOT that is called whenever something in the project changed (sinal of Project_Control* myProject) - it calls clear() and readFromFile()
- SIGNALS: signals that indicate if a potential changed
- SLOTS: slots for removing/setting potential data
- some helper methods for file writing (getPOTENTIALNAMEDataFileString()) for each potential
******* Constructor
1. Set myConfing, myProject, p_parent_UI
2. Create all potential objects
3. Set all m_usePOTENTIALNAME booleans to false
4. Set loadingFile boolean to false
5. Initialize myParser and register data class of this in parser
6. Add some connections 
****** Derived classes:
None. 
****** Questions:
- By which classes is the PotentialParameter_Data class used? 
****** Must be changed?
Yes. 
This class reads from the file and writes the potentials/validats files. 
- The writing functionality must be deleted
- The parsing functionality must be maintained
***** potentialparameterui.h
****** Implements:
****** Description:
****** Derived classes:
****** Questions:
****** Must be changed?
Definitely. 
***** Rest
potentialparametertable.cpp     // Superclass for the tables used in the potential parameter UI (these are displayed in the second half of the main window). 
potentialparametertable.h       // Superclass for the tables used in the potential parameter UI (these are displayed in the second half of the main window). 
potentialparameteruisuper.cpp   // Super class for PotentialParameterUI. 
potentialparameteruisuper.h     // Super class for PotentialParameterUI. 
potentialparameterwidget.cpp    // Super class for a lot of widget (children can be found in the next widget).
potentialparameterwidget.h      // Super class for a lot of widget (children can be found in the next widget).

***** Children of PotentialParameterWidget

anglewidget.h:26:class AngleWidget : public PotentialParameterWidget
bn3bodywidget.h:25:class BN3bodyWidget : public PotentialParameterWidget
bonddistancewidget.h:28:class BondDistanceWidget : public PotentialParameterWidget
bondswidget.h:25:class BondsWidget : public PotentialParameterWidget
coulomb_erfcwidget.h:23:class Coulomb_ERFCWidget : public PotentialParameterWidget
dampeddispwidget.h:23:class DampedDispWidget : public PotentialParameterWidget
improperwidget.h:28:class ImproperWidget : public PotentialParameterWidget
lennardjoneswidget.h:23:class LennardJonesWidget : public PotentialParameterWidget
ljspline2widget.h:23:class LJSpline2Widget : public PotentialParameterWidget
ljsplinewidget.h:23:class LJSplineWidget : public PotentialParameterWidget
m_n_lennardjoneswidget.h:23:class M_N_LennardJonesWidget : public PotentialParameterWidget
msdwidget.h:28:class MsdWidget : public PotentialParameterWidget
particlewidget.h:26:class ParticleWidget : public PotentialParameterWidget
qtaperwidget.h:24:class QTaperWidget : public PotentialParameterWidget
radialdistancewidget.h:29:class RadialDistanceWidget : public PotentialParameterWidget
rsl2widget.h:23:class RSL2Widget : public PotentialParameterWidget
stiwe3bodywidget.h:25:class StiWe3BodyWidget : public PotentialParameterWidget
stiwewidget.h:23:class StiWeWidget : public PotentialParameterWidget
suttonchenwidget.h:23:class SuttonChenWidget : public PotentialParameterWidget
tbbuckinghamwidget.h:23:class TBBuckinghamWidget : public PotentialParameterWidget
tbmorsewidget.h:25:class TBMorseWidget : public PotentialParameterWidget
tbtaperedgen1widget.h:23:class TBTaperedGen1Widget : public PotentialParameterWidget
tbtaperedgen2widget.h:25:class TBTaperedGen2Widget : public PotentialParameterWidget
tersoffmixitwidget.h:23:class TersoffMixitWidget : public PotentialParameterWidget
tersoffwidget.h:23:class TersoffWidget : public PotentialParameterWidget
torsionwidget.h:27:class TorsionWidget : public PotentialParameterWidget

**** TODO Which source files have to be replaced?
**** TODO Which source files can be deleted?
**** TODO Which source files have to be written?


*** TODO What interfaces are given? 
**** TODO Where is the "Potentials" tab created?
The PotentialParameterUI object is created in the constructor of the main window (see tremologui.h). It is a child object of TremoloGUI:
: PotentialParameterUI* potentialparametertab;
The potentialtab object is used in the following lines of tremologui.cpp
- l.106-109 :: Initialization of potentialparametertab and addition to the maintab widget
- l.110 :: Connect the isChanged(bool) signal of myProject to the setEnabled(bool) signal of potentialparametertab (derived from QWidget)
- l.112 :: Create a new PotentialParameter_Data object from the one saved in potentialparametertab. The copy is then used to construct the simulation tab.
- l.290 :: Connect the newSaveState() signal of potentialparametertab to the dataUpdateSavedStatus slot updating the state of the saveallbutton
- l.459 :: Checks save state of potentialparametertab
- l.651 :: TremoloGUI::projectChanged() sends update requests to all dataclasses. In potentialparametertab the reloadfile() method is called which is doing nothing??
- l.711 :: TremoloGUI::dataUpdateSavedStatus() updates the state of the saveallbutton
- l.719 :: TremoloGUI::dataSaveAllSlot() calls the saveslots from every dataclass. In potentialparametertab the fileSave() method is called.
- l.739,753,764 :: TremoloGUI::checkAndLoad/checkSavedStatusAndNewProject/checkSavedStatusAndOpenProject() set the save state of potentialparametertab. 
**** TODO What signals/slots are given?
In PotentialParameterUI the following slots are needed within tremologui.cpp:
- setEnabled(bool) exists by default (since derived from QWidget)
The following signals are needed within tremologui.cpp:
- newSaveState() 
**** TODO Where are all the other classes created?
**** TODO List of functions that must be present
- bool issaved storing the save-state
- bool isSaved() 
  returns issaved 
  used in TremoloGUI::unsavedData() (see line 459 of tremologui.cpp)
  used in TremoloGUI::unsavedData() (see line 711 of tremologui.cpp)
- void setSavedStatus(bool status)
  sets the issaved variable to status
  used in TremoloGUI::checkandload/checkSavedStatusAndNewProject/checkSavedStatusAndOpenProject (see lines 739, 753 and 764 of tremologui.cpp)
- void reloadfile(QString filename)
  reload potentials file
  used in TremoloGUI::projectChanged() (see line 651 of tremologui.cpp)
- bool fileSave() (slot)
  save file and return true if everything is ok, false otherwise, ask for validity?
  used in TremoloGUI::dataSaveAllSlot() (see line 719 of tremologui.cpp)
- void newSaveState() (signal)
  should be emitted if the save state changes


*** TODO What functionality is needed for the new "Potentials" page?
**** TODO Which functionality is needed for the page?
**** TODO Make a Draft for the new "Potentials" tab


*** TODO Implementation of new "Potentials" tab
***** Example: Files for Datafile-tab
parametertextedit.h
parametertextedit.cpp
****** Description of parametertextedit.h and parametertextedit.cpp
- Two classes
  1. class textEditStatusBar : public QWidget
  2. class parameterTextEdit : public QMainWindow

***** Description of textEditStatusBar class

Implements the status bar in the "Datafile"-tab (just at the lower end of the window). 

The status bar consists of 4 different frames (QFrame) containing each a QLabel with
+ the current position of the cursor
+ a indicator that shows if the file has been changed
+ the type of the file
+ the name of the file

The layout is managed by a QHBoxLayout for the statusbar itself and for different GridLayouts for each of the frames. 

The following slots are implemented:
+ changeCurrentPos
+ setFilename
+ setEditMode
+ languageChange

***** Description of parameterTextEdit class

Implements a texteditor for datafiles in the "Datafile"-tab. It is essentially a QMainWindow with a QTextEdit. Moreover the class has a textEditStatusBar as child object.

The class contains the following children:
+ QTextEdit for the texteditor window
+ QToolBar a toolbar for the texteditor
+ QActions for all buttons on the toolbar
+ QStrings to save the parameter file and a suffix
+ textEditStatusBar 
+ bools for different indications

The layout is managed by only one QVBoxLayout. 

There are only a few method implemented in the class: 
+ bool isSaved() const // returns true if the file is saved
+ void setSavedStatus(bool status) // sets the status of the file
+ void fileLoad(QString File) // loads the file that is supposed to be edited
+ void renewTextEdit2() // ?

Slots:
+ void fileSave() // saves the file
+ void reloadfile(QString parameterFileIn) // reload the file
+ void clearBuffer(bool ask=true) // ?
+ void setLoadingfileStatus(bool status) // ?
+ void enableFileSaveAction(void) // ?
+ void changeCurrentPos (void) // ?
+ void fileOpen() // open new file
+ fileSaveAs() // save file as
+ textEditChanged // action if textEdit has been changed
+ virtual void languageChange() // set language

Signals:
+ void newSaveState() // is send if the save-state of the file changes
  


*** TODO Get overview over all source files that are used for the "Potentials" tab
**** Main Window : PotentialParameterUI
Can be found in 
- potentialparameterui.h
- potentialparameterui.cpp

The class is derived from the PotentialParameterUISuperClass. 
It contains 
1. =ParticleWidget* particleWidget : public PotentialParameterWidget=
   Widget containing the upper half of the main window ("Particle types"). 
   The Widget contains
   - ParticleTable* particleTable : public PotentialParameterTable
   - PotentialParameter_Data* myPotentialParameter_Data
   - TremoloGUIConfig* myConfig
   - QPushButtons* disableParticleTypeButton and enableParticleTypeButton
   - QLabel* warningLabel
2. =QTabWidget* potentialsTabWidget=
   This tab widget is the main tab bar for the second half of the main window (potential selection).
   It hosts the following tabs: 
   - "Non-bonded Potentials" (-> nonBondedTabWidget)
   - "Bonded Potentials (off)" (-> bondedTabWidget)
   - "TB tapered Potentials (off)" (-> tbTaperedWidget and tbTaperedTabWidget)
3. =QTabWidget* bondedTabWidget=
   This tab widget is the main tab bar for the "Bonded Potentials (off)" page. 
   It contains the following widgets (all child objects of the PotentialParamerUI class): 
   - AngleWidget* angleWidget
   - BondsWidget* bondsWidget
   - ImproperWidget* improperWidget
4. =QTabWidget* nonBondedTabWidget=
   This tab widget is the main tab bar for the "Non-bonded Potentials" page. 
   It contains all widgets for the different potentials (all child objects of the PotentialParameterUI class):
   - QWidget* brennerWidget and Q3Table* brennerTable;
   - EamWidget* eamWidget;
   - Q3VBox* coulomb_ERFCBox and Coulomb_ERFCWidget* coulomb_ERFCWidget;
   - LennardJonesWidget* lennardJonesWidget;
   - M_N_LennardJonesWidget* m_n_lennardJonesWidget;
   - LJSplineWidget* ljSplineWidget;
   - LJSpline2Widget* ljSpline2Widget;
   - RSL2Widget* rsl2Widget;
   - StiWeWidget* stiWeWidget;
   - StiWe3BodyWidget* stiWe3BodyWidget;
   - SuttonChenWidget* suttonChenWidget;
   - Q3VBox* tersoffBox;
5. =QTabWidget* tbTaperedTabWidget=
   This tab widget is the main tab bar for the "TB tapered Potentials (off)". 
   It is contained in the QWidget* tbTaperedWidget and contains the following widges (all child object of the PotentialParameterUI class):
   - TBBuckinghamWidget* tbBuckinghamWidget;
   - TBTaperedGen1Widget* tbTaperedGen1Widget;
   - TBTaperedGen2Widget* tbTaperedGen2Widget;
   - TBMorseWidget* tbmorseWidget;
   - BN3bodyWidget* bn3bodyWidget;
   - DampedDispWidget* dampedDispWidget;


*** TODO Determine which files have to be deleted. 

**** Superclass: PotentialParameterUISuperClass

This class provides only one virtual method: 
: virtual void setLoadingFileStatus(bool loadingFileStatus);
It constitutes the superclass for the main window of the "Potentials" tab. 






*** TODO Change Makefile? 


* Fragen

1. [ ] Wann können branches aus dem Repository gelöscht werden? Von welchem Branch soll ich jetzt abzweigen? 
2. [ ] Die Methode void parameterTextEdit::renewTextEdit2() wird nie verwendet!?
3. [ ] Option "Save as" in potentials tab? Evtl. Speichere schon verwendete Potentiale in extra Struktur?
4. [ ] Was soll im unteren 1/3 der "Potentials" Seite stehen?
5. [ ] Was ist mit PotentialParameterData? Dies muss an den simulationtab übergeben werden (see tremologui.cpp, line 112)
       Braucht die Potentials Seite einen Parser, damit ein PotentialParameterData Objekt erstellt werden kann?
6. [ ] PotentialParameterUI::reloadfile() tut überhaupt nichts (wird zum Beispiel von TremoloGUI::projectChanged() aufgerufen, see tremologui.cpp, line 651)
7. [ ] void PotentialParameterUI::noLongerSaved() and void PotentialParameterUI::dataHasChanged() are doing exactly the same thing?!
8. [ ] virtual void PotentialParameterUI::languageChange() tut überhaupt nichts?? Ist das gewollt? 


* Summary
** Bisher getan:
PotentialParameter_Data durchgegangen. 
** Was getan werden muss:
1. [-] Mache Gesamtübersicht zu PotentialParameterUI - PotentialParameter_Data - TremoloGUI
   - [X] Finde heraus in welcher Form PotentialParameter_Data benötigt wird: 
	 - [X] welche Daten müssen in der Datenstruktur gespeichert werden (welche anderen Klassen brauchen diese) -> fast keine mehr (evtl ParticleTypes?)
	 - [X] welche Slots werden noch benötigt (alle Slots zur Interaktion von Datenstruktur und Gui können z.B. weg) -> siehe Übersicht
	 - [X] welche Funktionalitäten zum speichern und laden der potential-files wird noch benötigt -> Laden von potential-files evtl. nur noch rudimentär (für ParticleTypes)
   - [ ] Worin besteht die Interaktion von PotentialParameterUI und TremoloGUI?
   - [ ] Worin besteht die Interaktion von PotentialParemeterUI und PotentialParameter_Data?
   - [ ] Besteht eine Interaktion von PotentialParameter_Data und TremoloGUI?
   - [X] Werden die ganzen Potential-Klassen noch benötigt (z.B. lennardjones.h)? -> NEIN
2. [ ] Mache einen ersten Entwurf
3. [ ] Bereite Fragen für Christian vor. 


 
