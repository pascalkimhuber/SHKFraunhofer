#+STARTUP: logdone

* Organization

** Commit conventions
1. Name branch I am working in.
2. Be explicit about what has been done.
3. Mark if a "project" is finished.


* Configurations

** TODO Change passwords
Wait for Mail from IT. Change password if smartcard is there!


* Emacs

** Language evaluation in org mode (see http://zeekat.nl/articles/making-emacs-work-for-me.html#sec-10)
** DONE Qt Auto complete
   CLOSED: [2014-04-16 Wed 15:04]

** TODO Syntax highlighting for doxygen comments in c++ mode. 

** TODO Setter and getter methods. 

** TODO Rewrite Arbeitszeiten section


* Nuetzliches

** Tremolo aktualisieren

Nachdem eine neue Version des Tremolo-Ordners gepullt wurde, kann Tremolo wie folgt aktualisiert werden: 
: cd ~/tremolo/build
: make && make install

Das selbe gilt für Tremologui. 
: cd ~/tremologui/build
: make && make install


** Gnuplot Befehle

Einen Ueberblick zu nuetzlichen Gnuplot Befehlen kann auf der folgenden Seite gefunden werden: http://people.duke.edu/~hpgavin/gnuplot.html

1. Um ein Data-file (zum Beispiel =*.epot*=) mit Gnuplot zu plotten, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2
   Hierbei wird die zweite Spalte gegen die erste Spalte aufgetragen. 
2. Dies kann auch mit mehreren Files gleichzeitig getan werden: \\
   : gnuplot> plot "./argon.etot" using 1:2, "./argon.ekin" using 1:2, "./argon.epot" using 1:2
3. Um den Achsenabschnitt zu veraendern, verwendet man: \\
   : gnuplot> plot "./argon.epot" using 1:2; set yrange [-0.1: 2]
4. Den urspruenglichen Achsenabschnitt kann man wie folgt wieder herstellen: \\
   : gnuplot> plot "./argon.epot" using 1:2; set autoscale
5. Mit \\
   : gnuplot> replot 
   kann der Plot aktualisiert werden. 
6. Eine Uebersicht von =set= Befehlen: 
   Create a title:                  
   : set title "Force-Deflection Data" 
   Put a label on the x-axis:       
   : set xlabel "Deflection (meters)" 
   Put a label on the y-axis:       
   : set ylabel "Force (kN)"
   Change the x-axis range:         
   : set xrange [0.001:0.005]
   Change the y-axis range:         
   : set yrange [20:500] 
   Have Gnuplot determine ranges:   
   : set autoscale
   Move the key:                    
   : set key 0.01,100
   Delete the key:                  
   : unset key
   Put a label on the plot:         
   : set label "yield point" at 0.003, 260
   Remove all labels:               
   : unset label
   Plot using log-axes:             
   : set logscale
   Plot using log-axes on y-axis:   
   : unset logscale; set logscale y
   Change the tic-marks:            
   : set xtics (0.002,0.004,0.006,0.008)
   Return to the default tics:      
   : unset xtics; set xtics auto
   Set output:                      
   : set output 'introduction.png'

   
** Grep Befehle

http://www.panix.com/~elflord/unix/grep.html


** Git Befehle

*** Branches
- Create a new branch:
  : git branch <name_of_new_branch>
- Create a new branch by pulling from a remote branch:
  : git checkout -b <name_of_new_branch> origin/<name_of_branch>
- Delete a local branch:
  : git branch -d <name_of_branch>
- Naming convention: use well defined tokes like 
  : feature
  : bugfix
  : test
  followed by a slash '/' and a describing name, e.g.:
  : feature/potentials

*** Diff
- Show differences between <branch1> and <branch2>
  : git diff <branch1>..<branch2>

*** Manipulate changes. 
- Remove untracked files:
  : git clean -f -d

*** Add and remove changes. 
- Remove deleted files from stack:
  : git add -u .

*** Remote repositories
- Add remote repository with name /origin/ (e.g. https://pascalkimhuber@bitbucket.org/pascalkimhuber/stacked.git)
  : git remote add origin <address of remote> 
- Push a local repository to a remote repository with name /origin/ for the first time
  : git push -u origin --all

*** Merging branches
- Merge <branch1> into <branch2>
  : git checkout <branch2>
  : git merge <branch1>
  

** Find Befehle

- Find all files with names containing =<pattern>= (wildcards have to be used with a preceeding backslash!):
  : find -name <pattern> 
  or e.g. 
  : find -name <pattern>\*


** Doxygen Befehle

- [[http://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdc][List of special commands]]
  

* Aufgaben
  - Note taken on [2014-05-07 Wed 15:17] \\
	Besprechung mit Christian am [2014-05-07 Wed]
	
	Überarbeitung des "Potentials" tab - Zusammenfassung: 
	1. Behalte Trennung von Data und GUI bei: 
	   - PotentialParameter_Data enthält:
		 + Parser
		 + QStringList mit particle types
		 + ggfs. weitere Data
	   - PotentialParameter_GUI enthält alle benötigten Widgets: 
		 + Menüleiste mit "New", "Open", "Save" Button
		 + Editor-Fenster
		 + Platz für spätere Widgets
	2. Beschreibung der 3 Buttons: 
	   - "New" :: 
		 - gibt Warnung aus
		 - erstellt leeres $Project.potentials file
		 - ruft Parser auf und updated data (particle types etc.)
		 - erstellt zugehöriges $Project.validates file
	   - "Open" :: 
		 - öffnet eine Öffnen-Dialog
		 - gibt Warnung aus (nach Wahl eines files)
		 - erstellt lokale Kopie des ausgewählten files im Projekt-Ordner
		 - ruft Parser auf und updated data
		 - erstellt zugehöriges $Project.validates file
		 - WICHTIG: soll erweiterbar sein
	   - "Save" :: 
		 - nur enabled wenn $Project.potentials file sich geändert hat
		 - gibt Warnung aus
		 - speichert Änderungen im $Project.potentials file
		 - ruft Parser auf und updated data
		 - erstellt zugehöriges $Project.validates file
	3. "Save-All" button
	   Rufe slot des "Save"-Buttons auf, wenn der "Save-All" button des Main Windows angeklickt wurde.
	4. Eventuell noch "Undo" and "Redo" Buttons? 
  - Note taken on [2014-04-16 Wed 15:57] \\
	Besprechung mit Christian um [2014-04-16 Wed 15:57]
	Zwei Aufgabenziele: 
	1. Kurzfristiges Ziel:
	   Überarbeitung des "potentials" tabs
	   - Übernehme Elemente von "Datafile" tab
	   - Obere 2/3 des Tabs: Editor-Fenster in das ein Potentials-file geladen werden soll
		 - der Editor soll die Funktionen "open" and "save" bereitstellen
		 - open-button:
		   + soll erweiterbar sein (d.h. es sollen noch mögliche "Suchfunktionen" eingebunden werden können -> handler)
		   + vorerst: einen beliebigen Ordner öffnen
		   + nach .potential files filtern
		   + nachdem der Nutzer ein file ausgewählt hat, soll eine Kopie des files in den Projekt-Ordner gelegt werden mit dem Namen "PROJECTNAME.potentials"
		   + falls nach Sicherung eines .potential-files ein weiteres file geöffnet wird, soll eine Warnung zum "Datenverlust" abgegeben werden.
		 - save-button: 
		   + speichert die Änderungen im .potentials file.
	   - Stelle sicher, dass immer ein .validates-file erzeugt wird (notfalls auch leer (default)). 
	2. Langfristiges Ziel: 
	   - Verifizieren von Ensembles 
	   - etwas mit Monte-Carlo Methoden (siehe folgende Links)
		 - [[file:~/Work/literature/Possible%20Master%20topics/Combining%20molecular%20dynamics%20with%20Monte%20Carlo%20simulations.pdf][Combining molecular dynamics and Monte Carlo methods]]
		 - [[file:~/Work/literature/Possible%20Master%20topics/Uniform-acceptance%20force-bias%20Monte%20Carlo%20method%20with%20time%20scale%20to%20study%20solid-state%20diffusion.pdf][Uniform-acceptance force-bias Monte Carlo method]]

** TODO Refactoring of "Potentials" page [4/9]
   CLOCK: [2014-05-26 Mon 10:48]--[2014-05-26 Mon 11:48] =>  1:00
   CLOCK: [2014-05-23 Fri 13:43]--[2014-05-23 Fri 15:27] =>  1:44
   CLOCK: [2014-05-22 Thu 16:58]--[2014-05-22 Thu 18:11] =>  1:13
   CLOCK: [2014-05-22 Thu 12:39]--[2014-05-22 Thu 16:10] =>  3:31
   CLOCK: [2014-05-21 Wed 16:20]--[2014-05-21 Wed 17:20] =>  1:00
   CLOCK: [2014-05-21 Wed 14:31]--[2014-05-21 Wed 16:11] =>  1:40
   CLOCK: [2014-05-16 Fri 17:44]--[2014-05-16 Fri 19:16] =>  1:32
   CLOCK: [2014-05-16 Fri 14:31]--[2014-05-16 Fri 16:36] =>  2:05
   CLOCK: [2014-05-15 Thu 12:33]--[2014-05-15 Thu 13:56] =>  1:23
   CLOCK: [2014-05-15 Thu 10:19]--[2014-05-15 Thu 11:24] =>  1:05
   CLOCK: [2014-05-14 Wed 16:51]--[2014-05-14 Wed 18:34] =>  1:43
   CLOCK: [2014-05-14 Wed 14:46]--[2014-05-14 Wed 15:37] =>  0:51
   CLOCK: [2014-05-14 Wed 14:30]--[2014-05-14 Wed 14:46] =>  0:16
   CLOCK: [2014-05-13 Tue 17:26]--[2014-05-13 Tue 19:03] =>  1:37
*** DONE What interfaces are given? 
	 CLOSED: [2014-05-07 Wed 15:12]
**** DONE Where is the "Potentials" tab created?
	 CLOSED: [2014-05-07 Wed 15:12]
The PotentialParameterUI object is created in the constructor of the main window (see tremologui.h). It is a child object of TremoloGUI:
: PotentialParameterUI* potentialparametertab;
The potentialtab object is used in the following lines of tremologui.cpp
- l.106-109 :: Initialization of potentialparametertab and addition to the maintab widget
- l.110 :: Connect the isChanged(bool) signal of myProject to the setEnabled(bool) signal of potentialparametertab (derived from QWidget)
- l.112 :: Create a new PotentialParameter_Data object from the one saved in potentialparametertab. The copy is then used to construct the simulation tab.
- l.290 :: Connect the newSaveState() signal of potentialparametertab to the dataUpdateSavedStatus slot updating the state of the saveallbutton
- l.459 :: Checks save state of potentialparametertab
- l.651 :: TremoloGUI::projectChanged() sends update requests to all dataclasses. In potentialparametertab the reloadfile() method is called which is doing nothing??
- l.711 :: TremoloGUI::dataUpdateSavedStatus() updates the state of the saveallbutton
- l.719 :: TremoloGUI::dataSaveAllSlot() calls the saveslots from every dataclass. In potentialparametertab the fileSave() method is called.
- l.739,753,764 :: TremoloGUI::checkAndLoad/checkSavedStatusAndNewProject/checkSavedStatusAndOpenProject() set the save state of potentialparametertab. 
**** DONE What signals/slots are given?
	 CLOSED: [2014-05-07 Wed 15:12]
In PotentialParameterUI the following slots are needed within tremologui.cpp:
- setEnabled(bool) exists by default (since derived from QWidget)
The following signals are needed within tremologui.cpp:
- newSaveState() 
**** DONE Where are all the other classes created?
	 CLOSED: [2014-05-07 Wed 15:12]
**** DONE List of functions that must be present
	 CLOSED: [2014-05-07 Wed 15:12]
- bool issaved storing the save-state
- bool isSaved() 
  returns issaved 
  used in TremoloGUI::unsavedData() (see line 459 of tremologui.cpp)
  used in TremoloGUI::unsavedData() (see line 711 of tremologui.cpp)
- void setSavedStatus(bool status)
  sets the issaved variable to status
  used in TremoloGUI::checkandload/checkSavedStatusAndNewProject/checkSavedStatusAndOpenProject (see lines 739, 753 and 764 of tremologui.cpp)
- void reloadfile(QString filename)
  reload potentials file
  used in TremoloGUI::projectChanged() (see line 651 of tremologui.cpp)
- bool fileSave() (slot)
  save file and return true if everything is ok, false otherwise, ask for validity?
  used in TremoloGUI::dataSaveAllSlot() (see line 719 of tremologui.cpp)
- void newSaveState() (signal)
  should be emitted if the save state changes

*** DONE Implementation of new "Potentials" tab
	 CLOSED: [2014-05-07 Wed 15:12]
***** Example: Files for Datafile-tab
parametertextedit.h
parametertextedit.cpp
****** Description of parametertextedit.h and parametertextedit.cpp
- Two classes
  1. class textEditStatusBar : public QWidget
  2. class parameterTextEdit : public QMainWindow

***** Description of textEditStatusBar class

Implements the status bar in the "Datafile"-tab (just at the lower end of the window). 

The status bar consists of 4 different frames (QFrame) containing each a QLabel with
+ the current position of the cursor
+ a indicator that shows if the file has been changed
+ the type of the file
+ the name of the file

The layout is managed by a QHBoxLayout for the statusbar itself and for different GridLayouts for each of the frames. 

The following slots are implemented:
+ changeCurrentPos
+ setFilename
+ setEditMode
+ languageChange

***** Description of parameterTextEdit class

Implements a texteditor for datafiles in the "Datafile"-tab. It is essentially a QMainWindow with a QTextEdit. Moreover the class has a textEditStatusBar as child object.

The class contains the following children:
+ QTextEdit for the texteditor window
+ QToolBar a toolbar for the texteditor
+ QActions for all buttons on the toolbar
+ QStrings to save the parameter file and a suffix
+ textEditStatusBar 
+ bools for different indications

The layout is managed by only one QVBoxLayout. 

There are only a few method implemented in the class: 
+ bool isSaved() const // returns true if the file is saved
+ void setSavedStatus(bool status) // sets the status of the file
+ void fileLoad(QString File) // loads the file that is supposed to be edited
+ void renewTextEdit2() // ?

Slots:
+ void fileSave() // saves the file
+ void reloadfile(QString parameterFileIn) // reload the file
+ void clearBuffer(bool ask=true) // ?
+ void setLoadingfileStatus(bool status) // ?
+ void enableFileSaveAction(void) // ?
+ void changeCurrentPos (void) // ?
+ void fileOpen() // open new file
+ fileSaveAs() // save file as
+ textEditChanged // action if textEdit has been changed
+ virtual void languageChange() // set language

Signals:
+ void newSaveState() // is send if the save-state of the file changes
  
*** DONE Get overview over all source files that are used for the "Potentials" tab
	 CLOSED: [2014-05-07 Wed 15:13]
**** Main Window : PotentialParameterUI
Can be found in 
- potentialparameterui.h
- potentialparameterui.cpp

The class is derived from the PotentialParameterUISuperClass. 
It contains 
1. =ParticleWidget* particleWidget : public PotentialParameterWidget=
   Widget containing the upper half of the main window ("Particle types"). 
   The Widget contains
   - ParticleTable* particleTable : public PotentialParameterTable
   - PotentialParameter_Data* myPotentialParameter_Data
   - TremoloGUIConfig* myConfig
   - QPushButtons* disableParticleTypeButton and enableParticleTypeButton
   - QLabel* warningLabel
2. =QTabWidget* potentialsTabWidget=
   This tab widget is the main tab bar for the second half of the main window (potential selection).
   It hosts the following tabs: 
   - "Non-bonded Potentials" (-> nonBondedTabWidget)
   - "Bonded Potentials (off)" (-> bondedTabWidget)
   - "TB tapered Potentials (off)" (-> tbTaperedWidget and tbTaperedTabWidget)
3. =QTabWidget* bondedTabWidget=
   This tab widget is the main tab bar for the "Bonded Potentials (off)" page. 
   It contains the following widgets (all child objects of the PotentialParamerUI class): 
   - AngleWidget* angleWidget
   - BondsWidget* bondsWidget
   - ImproperWidget* improperWidget
4. =QTabWidget* nonBondedTabWidget=
   This tab widget is the main tab bar for the "Non-bonded Potentials" page. 
   It contains all widgets for the different potentials (all child objects of the PotentialParameterUI class):
   - QWidget* brennerWidget and Q3Table* brennerTable;
   - EamWidget* eamWidget;
   - Q3VBox* coulomb_ERFCBox and Coulomb_ERFCWidget* coulomb_ERFCWidget;
   - LennardJonesWidget* lennardJonesWidget;
   - M_N_LennardJonesWidget* m_n_lennardJonesWidget;
   - LJSplineWidget* ljSplineWidget;
   - LJSpline2Widget* ljSpline2Widget;
   - RSL2Widget* rsl2Widget;
   - StiWeWidget* stiWeWidget;
   - StiWe3BodyWidget* stiWe3BodyWidget;
   - SuttonChenWidget* suttonChenWidget;
   - Q3VBox* tersoffBox;
5. =QTabWidget* tbTaperedTabWidget=
   This tab widget is the main tab bar for the "TB tapered Potentials (off)". 
   It is contained in the QWidget* tbTaperedWidget and contains the following widges (all child object of the PotentialParameterUI class):
   - TBBuckinghamWidget* tbBuckinghamWidget;
   - TBTaperedGen1Widget* tbTaperedGen1Widget;
   - TBTaperedGen2Widget* tbTaperedGen2Widget;
   - TBMorseWidget* tbmorseWidget;
   - BN3bodyWidget* bn3bodyWidget;
   - DampedDispWidget* dampedDispWidget;

**** Corresponding data file: PotentialParameter_Data
****** Implements:
class PotentialParameter_Data	   
****** Description:
The class contains all data that is necessary to write the potentials and the validates file. 
******* Members (only important ones)
- instances of all potentials 
- pointer to the project (Project_Control* myProject)
- pointer to the configuration (TremoloGUIConfig* myConfig)
- a parser (ParameterParser* myParser)
- pointer to the PotentialParameterUI parent class (PotentialParameterUISuperClass* parentUI)
- booleans to indicate which potentials are going to be used
- boolean loadingFile (if true some tests are skipped -> faster loading)
******* Member functions (only important ones)
- getter and setter methods for all potentials
- saveValues(): uses the Output of the parser and saves all data from the file into the data structure - this method is called within ParameterParser::parseFile()
- writeToFile(): Opens a file for writing, calls toParameterFileString() and writes all data to the file
- writeToValidatesFile(): Analougously to writeToFile() but for the validates data.
- readFromFile(): starts the parser for the given file and then saves all data to the data structure
- projectHasChanged(): important SLOT that is called whenever something in the project changed (sinal of Project_Control* myProject) - it calls clear() and readFromFile()
- SIGNALS: signals that indicate if a potential changed
- SLOTS: slots for removing/setting potential data
- some helper methods for file writing (getPOTENTIALNAMEDataFileString()) for each potential
******* Constructor
1. Set myConfing, myProject, p_parent_UI
2. Create all potential objects
3. Set all m_usePOTENTIALNAME booleans to false
4. Set loadingFile boolean to false
5. Initialize myParser and register data class of this in parser
6. Add some connections 
****** Derived classes:
None. 
****** Questions:
- By which classes is the PotentialParameter_Data class used? 
****** Must be changed?
Yes. 
This class reads from the file and writes the potentials/validats files. 
- The writing functionality must be deleted
- The parsing functionality must be maintained

*** TODO Change Makefile? 
*** TODO Draft for the new "Potentials" tab
	- Note taken on [2014-05-15 Thu 13:51] \\
	  In order to add/remove source files of cmake configuration. 
	  1. Go to cmake folder. 
	  2. in CMakeLists.txt add/remove corresponding source files. 
	  3. call ccmake and add local installation path. 
	  4. run cmake, make, and make install.
	- Note taken on [2014-05-13 Tue 19:00] \\
	  Questions: 
	  - How is the content of a file stored in QTextEdit?
	  - Does it needs the underlying file?
	  - Can a file be savely loaded by QTextEdit and changes made in the QTextEdit without modifying the initial file? 
	  Answers: 
	  It seems that QTextEdit does not need an underlying file: 
	  The text of a QFile is loaded in the QTextEdit using setText() which only needs a QString. 
	  The underlying file can be closed after loading and is not modified afterwards. This only depends on the save method.
	- Note taken on [2014-05-13 Tue 17:28] \\
	  1. At creation of a new project -> create empty .potentials and .validates files.
	  2. Warning at "Save" button: try to avoid warnings at "New" and "Open" buttons. 
	     - For the "New" button: NO warning necessary -> only warning when hitting "Save" button
	     - For the "Open" button: Depends how the editor loads the file.
**** DONE Draft for PotentialTextEditStatusBar : public QWidget
	 CLOSED: [2014-05-14 Wed 18:05]
***** Specifications: 
Status bar having the following fields: (from left to right)
1. Current position in line and column
2. Save status
3. Current status (File loaded + name, file saved, created new file, file modified)
4. Name of the file
***** Members:
QHBoxLayout* textEditStatusBarLayout
QGridLayout* frame1Layout
QGridLayout* frame2Layout
QGridLayout* frame3Layout
QGridLayout* frame4Layout
QFrame* frame1 // for current position
QFrame* frame2 // for save status
QFrame* frame3 // for current status
QFrame* frame4 // for name of the file
QLabel* label1 // for current position
QLabel* label2 // for save status
QLabel* label3 // for current status
QLabel* label4 // for name of the file
***** Slots: 
void setCurrentPos(int lin = 0, int col = 0)
void setSaveStatus(bool saved = true)
void setCurrentStatus(QString message)
void setFileName(QString filename)
void languageChange()

*** TODO Adapt Manual
*** DONE Change ParticleType class
*** TODO Proper error handling in PotentialParameter_Data class. 
This concerns the methods: 
- void PotentialParameter_Data::writeValidatesFile(QString filename)
- bool PotentialParameter_Data::saveValues( QStringList keywordsIn, QStringList identifierListIn, ParseReturnList returnValueListIn )
	 CLOSED: [2014-05-16 Fri 17:44]
Keep only the element name and the particle type. 	

*** TODO Determine if QFileDialog::openFileName() works properly (in particular the filter)


** TODO Find bugs in displaying of units
   CLOCK: [2014-05-26 Mon 17:26]--[2014-05-26 Mon 18:58] =>  1:32
   - Note taken on [2014-05-26 Mon 10:58] \\
	 Aufgabe von Johannes
	 Bei der Portierung von Tremologui auf Windows werden manche Einheiten nicht korrekt angezeigt. 
	 Das betrifft zum einen das Angstrom-Zeichen und zum anderen underscores.
	 Hier sind zwei Screenshots: 
     - [[file:pics/Screenshot.png][TremoloGUI - buggy unit display in Windows]]
	 - [[file:pics/Screenshot2.png][TremoloGUI - working unit display in Windows]]

*** Unit display for TB Taper x_i(A) in Potentials
- PotentialParameter_Data: getttbTaperxiUnit
- TremologuiConfig: trDisplayUnits(StandardisedDouble)
- UnitsMap[].displayString
- TremoloGUI_CommonTypes: Angstroem.setUtf16(&b,1)

*** Unit display for particles table in Potentials
- ParticleType: 


* Arbeitszeit

#+BEGIN: clocktable :maxlevel 2 :scope file :block thisweek
Clock summary at [2014-05-26 Mon 18:58], for week 2014-W22.

| Headline                                     | Time   |      |
|----------------------------------------------+--------+------|
| *Total time*                                 | *2:32* |      |
|----------------------------------------------+--------+------|
| Aufgaben                                     | 2:32   |      |
| \__ TODO Refactoring of "Potentials" page... |        | 1:00 |
| \__ TODO Find bugs in displaying of units    |        | 1:32 |
#+END:

** Überstunden
| Week     |     Time |  Overtime |
|----------+----------+-----------|
| 2014-W20 |    10:32 |  01:32:00 |
| 2014-W21 |    09:08 |  00:08:00 |
| 2014-W22 |     7:32 | -01:28:00 |
|----------+----------+-----------|
| Total    | 27:12:00 |  00:12:00 |
#+TBLFM: $3=$2-9*3600;T::@>$2=vsum(@2$2..@-1$2);T::@>$3=vsum(@2$3..@-1$3);T::



* Fragen [5/10]

1. [X] Wann können branches aus dem Repository gelöscht werden? Von welchem Branch soll ich jetzt abzweigen? 
   /Immer vom master-Branch abzweigen. Im Zweifelsfall nochmal nachfragen./
2. [ ] Die Methode void parameterTextEdit::renewTextEdit2() wird nie verwendet!?
3. [X] Option "Save as" in potentials tab? Evtl. Speichere schon verwendete Potentiale in extra Struktur?
   /Nein./
4. [X] Was soll im unteren 1/3 der "Potentials" Seite stehen?
   /Voerst leer lassen. Soll nachher Platz für weitere Funktionalitäten bieten./
5. [X] Was ist mit PotentialParameterData? Dies muss an den simulationtab übergeben werden (see tremologui.cpp, line 112)
       Braucht die Potentials Seite einen Parser, damit ein PotentialParameterData Objekt erstellt werden kann?
   /Parser soll vorhanden sein. Auch das PotentialParameter_Data Objekt soll weiterhin bestehen bleiben./
6. [ ] PotentialParameterUI::reloadfile() tut überhaupt nichts (wird zum Beispiel von TremoloGUI::projectChanged() aufgerufen, see tremologui.cpp, line 651)
7. [ ] void PotentialParameterUI::noLongerSaved() and void PotentialParameterUI::dataHasChanged() are doing exactly the same thing?!
8. [ ] virtual void PotentialParameterUI::languageChange() tut überhaupt nichts?? Ist das gewollt?
9. [ ] Underscores for members? 
10. [X] Frage an Christian: Sollen particles im validates file auch disabled werden können?
	/Nein./


* SUMMARY
** Bisher getan:
Finished PotentialParameter_Data. Added members to PotentialParameter_GUI. 
** Was getan werden muss:
1. Implement PotentialParameter_GUI class. Still missing are: 
   - constructor
   - destructor
   - languageChange()



 
